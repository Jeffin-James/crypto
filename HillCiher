public class HillCipher {

    public static int [][] keyMat = {{1,2,1},{2,3,2},{2,2,1}};
    public static int [][] invKeyMat = {{-1,0,1},{2,-1,0},{-2,2,-1}};

    public static String key = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    public static void main(String[] args) {
        String msg = "SecurityLaboratory";
        msg = msg.toUpperCase();
        msg = msg.replaceAll("\\s","");
        int n = msg.length() % 3;
        if(n != 0){
            if(n==1)
                msg += "XX";
            if(n==2)
                msg += "X";
        }
        String enc = "";
        String dec = "";
        for(int i=0;i<msg.length();i+=3){
            enc += encode(msg.charAt(i),msg.charAt(i+1),msg.charAt(i+2));
        }
        System.out.println(enc);
        for(int i=0;i<enc.length();i+=3){
            dec += decode(enc.charAt(i),enc.charAt(i+1),enc.charAt(i+2));
        }
        System.out.println(dec);
    }

    public static String encode(char a, char b, char c){
        String res = "";
        int x,y,z;
        int posa = (int)a-65;
        int posb = (int)b-65;
        int posc = (int)c-65;
        x = posa*keyMat[0][0] + posb*keyMat[1][0] + posc*keyMat[2][0];
        y = posa*keyMat[0][1] + posb*keyMat[1][1] + posc*keyMat[2][1];
        z = posa*keyMat[0][2] + posb*keyMat[1][2] + posc*keyMat[2][2];
        a = key.charAt(x%26);
        b = key.charAt(y%26);
        c = key.charAt(z%26);
        return res+a+b+c;
    }

    public static String decode(char a, char b, char c){
        String res = "";
        int x,y,z;
        int posa = (int)a-65;
        int posb = (int)b-65;
        int posc = (int)c-65;
        x = posa*invKeyMat[0][0] + posb*invKeyMat[1][0] + posc*invKeyMat[2][0];
        y = posa*invKeyMat[0][1] + posb*invKeyMat[1][1] + posc*invKeyMat[2][1];
        z = posa*invKeyMat[0][2] + posb*invKeyMat[1][2] + posc*invKeyMat[2][2];
        a = key.charAt(x%26<0 ? 26+x%26 : x%26);
        b = key.charAt(y%26<0 ? 26+y%26 : y%26);
        c = key.charAt(z%26<0 ? 26+z%26 : z%26);
        return res+a+b+c;
    }
}
